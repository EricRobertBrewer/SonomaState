/*
parseTable.hpp
Eric Brewer
11/19/10
Watts
CS460 - Programming Languages
Parse Table - 
*/

#ifndef PARSETABLE_HPP
#define PARSETABLE_HPP

#include <string>
using namespace std;

#define NUM_TERMINALS    44
#define NUM_NONTERMINALS 10

enum NONTERMINAL{ PROGRAM,    MORE_STMTS, STMT,       TERM,       PRE,
		  UOPPRE,     VAR,        POST,       STMT_TAIL,  BINOP };

static string non_terminal_names[NUM_NONTERMINALS] = { "PROGRAM", "MORE_STMTS", "STMT", "TERM", "PRE",
						       "UOPPRE", "VAR", "POST", "STMT_TAIL", "BINOP" };

int firsts[NUM_TERMINALS][NUM_NONTERMINALS] = {
  /* 0   1   2   3   4   5   6   7   8   9  */

  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },  // ERROR
  {  1,  1,  1,  1,  1,  1,  0,  1,  1,  1 },  // PL
  {  1,  1,  1,  1,  1,  1,  0,  1,  1,  1 },  // MIN
  {  1,  1,  1,  1,  1,  1,  0,  1,  1,  1 },  // MULT
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // DIV
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // MOD
  {  1,  1,  1,  1,  1,  1,  0,  1,  0,  0 },  // PLPL
  {  1,  1,  1,  1,  1,  1,  0,  1,  0,  0 },  // MINMIN
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // EQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // PLEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // MINEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // MULTEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // DIVEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // MODEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // SHIFTLEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // SHIFTREQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // ANDEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // OREQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // XOREQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // EQEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // NOTEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // LT
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // GT
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // LTEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // GTEQ
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // LOGAND
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // LOGOR
  {  1,  1,  1,  1,  1,  1,  0,  0,  0,  0 },  // LOGNOT
  {  1,  1,  1,  1,  1,  1,  0,  1,  1,  1 },  // AND
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // OR
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // XOR
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // SHIFTL
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // SHIFTR
  {  1,  1,  1,  1,  1,  1,  0,  0,  0,  0 },  // ONESCOMP
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  0 },  // QUESTION
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  0 },  // COLON
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  1 },  // COMMMA
  {  1,  1,  1,  1,  0,  0,  0,  0,  0,  0 },  // LPAREN
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  0 },  // RPAREN
  {  0,  0,  0,  0,  0,  0,  0,  1,  1,  0 },  // SEMI
  {  1,  1,  1,  1,  1,  0,  1,  0,  0,  0 },  // IDENT
  {  1,  1,  1,  1,  1,  0,  1,  0,  0,  0 },  // INT
  {  1,  1,  1,  1,  1,  0,  1,  0,  0,  0 },  // REAL
  {  0,  1,  0,  0,  0,  0,  0,  0,  0,  0 }   // ENDFILE
};

int follows[NUM_TERMINALS][NUM_NONTERMINALS] = {
  /* 0   1   2   3   4   5   6   7   8   9  */

  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 },  // ERROR
  {  0,  0,  0,  1,  0,  1,  1,  1,  0,  1 },  // PL
  {  0,  0,  0,  1,  0,  1,  1,  1,  0,  1 },  // MIN
  {  0,  0,  0,  1,  0,  1,  1,  1,  0,  1 },  // MULT
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // DIV
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // MOD
  {  0,  0,  0,  0,  0,  1,  1,  0,  0,  1 },  // PLPL
  {  0,  0,  0,  0,  0,  1,  1,  0,  0,  1 },  // MINMIN
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // EQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // PLEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // MINEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // MULTEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // DIVEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // MODEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // SHIFTLEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // SHIFTREQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // ANDEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // OREQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // XOREQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // EQEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // NOTEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // LT
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // GT
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // LTEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // GTEQ
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // LOGAND
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // LOGOR
  {  0,  0,  0,  0,  0,  1,  0,  0,  0,  1 },  // LOGNOT
  {  0,  0,  0,  1,  0,  1,  1,  1,  0,  1 },  // AND
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // OR
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // XOR
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // SHIFTL
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // SHIFTR
  {  0,  0,  0,  0,  0,  1,  0,  0,  0,  1 },  // ONESCOMP
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // QUESTION
  {  0,  0,  1,  1,  0,  0,  1,  1,  1,  0 },  // COLON
  {  0,  0,  0,  1,  0,  0,  1,  1,  0,  0 },  // COMMMA
  {  0,  0,  0,  0,  0,  0,  0,  0,  0,  1 },  // LPAREN
  {  0,  0,  1,  1,  0,  0,  1,  1,  1,  0 },  // RPAREN
  {  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },  // SEMI
  {  0,  0,  0,  0,  1,  1,  0,  0,  0,  1 },  // IDENT
  {  0,  0,  0,  0,  1,  1,  0,  0,  0,  1 },  // INT
  {  0,  0,  0,  0,  1,  1,  0,  0,  0,  1 },  // REAL
  {  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 }   // ENDFILE
};

#endif
